name: Lint and test

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - '*'


jobs:
  test-python:
    runs-on: ubuntu-latest
    # TODO: fix postgresql tests, oidc_provider fails
    # services:
    #  db:
    #    image: postgres:latest
    #    environment:
    #      POSTGRES_USER: postgres
    #      POSTGRES_DB: onlineweb4
    #      POSTGRES_PASSWORD: postgres

    # Run if the repo is not a fork, or if it is a fork with the label 'safe to test', or if it is dependabot
    if: |
        github.event.pull_request.head.repo.full_name == github.repository
        || contains(github.event.pull_request.labels.*.name, 'safe to test')
        || github.actor == 'dependabot[bot]'
        || github.ref == 'refs/heads/main'
    steps:
      - name: checkout-if-pr
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          # when using pull_requst, by default the code that is checked-out is actually the base of the PR, not the code of it.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: checkout-if-push
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}

      - name: Cache python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules/
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Copy settings file
        run: cp onlineweb4/settings/example-local.py onlineweb4/settings/local.py

      - name: Install python dependencies
        run: |
          pipx install poetry==1.1.13
          poetry install --no-interaction --no-ansi

      - name: Install node dependencies
        run: yarn install --pure-lockfile

      - name: npm build
        run: npm run build:prod

      - name: Python tests
        env:
          OW4_DJANGO_STRIPE_PUBLIC_KEY_ARRKOM: ${{ secrets.STRIPE_PUBLIC_KEY_ARRKOM }}
          OW4_DJANGO_STRIPE_PUBLIC_KEY_PROKOM: ${{ secrets.STRIPE_PUBLIC_KEY_PROKOM }}
          OW4_DJANGO_STRIPE_PUBLIC_KEY_TRIKOM: ${{ secrets.STRIPE_PUBLIC_KEY_TRIKOM }}
          OW4_DJANGO_STRIPE_PRIVATE_KEY_ARRKOM: ${{ secrets.STRIPE_PRIVATE_KEY_ARRKOM }}
          OW4_DJANGO_STRIPE_PRIVATE_KEY_PROKOM: ${{ secrets.STRIPE_PRIVATE_KEY_PROKOM }}
          OW4_DJANGO_STRIPE_PRIVATE_KEY_TRIKOM: ${{ secrets.STRIPE_PRIVATE_KEY_TRIKOM }}
          # TODO: see service todo
          # DATABASE_URL: postgres://postgres:postgres@db:5432/onlineweb4
        run: poetry run tox -e tests
      # upload test coverage to codecov
      - uses: codecov/codecov-action@v2

  lint-python:
    runs-on: ubuntu-latest
    steps:
      - name: checkout-if-pr
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          # when using pull_requst, by default the code that is checked-out is actually the base of the PR, not the code of it.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: checkout-if-push
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}

      - name: Cache python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Copy settings file
        run: cp onlineweb4/settings/example-local.py onlineweb4/settings/local.py

      - name: Install python dependencies
        run: |
          pipx install poetry==1.1.13
          poetry install --no-interaction --no-ansi

      - name: Python linting
        run: poetry run tox -e flake8 -e isort -e black

  check-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: checkout-if-pr
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          # when using pull_requst, by default the code that is checked-out is actually the base of the PR, not the code of it.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: checkout-if-push
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}

      - name: Cache python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Copy settings file
        run: cp onlineweb4/settings/example-local.py onlineweb4/settings/local.py

      - name: Install python dependencies
        run: |
          pipx install poetry==1.1.13
          poetry install --no-interaction --no-ansi

      - name: Check migrations
        run: poetry run python manage.py makemigrations --check

  lint-js:
    runs-on: ubuntu-latest
    steps:
      - name: checkout-if-pr
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          # when using pull_requst, by default the code that is checked-out is actually the base of the PR, not the code of it.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: checkout-if-push
        uses: actions/checkout@v3
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules/
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install node dependencies
        run: yarn install --pure-lockfile

      - name: JS linting
        run: npm run lint-js

      - name: less linting
        run: npm run lint-less
